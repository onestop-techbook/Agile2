= アジャイルの興りを学ぼう

//flushright{
    山田 雄一@ditflame
//}

== アジャイルとはやり方ではなくあり方である
=== アジャイルとは

「アジャイル」という言葉が一般的になってずいぶんと経ちます。

例えば、プロジェクトマネジメントの知識体系ガイドである「プロジェクトマネジメント知識体系ガイド（PMBOK(R)ガイド）」@<fn>{pmbok}を見てみると、2017年に発行された第6版まではウォーターフォール型開発のような開発モデル@<fn>{pm6thmodel}が主たるモデルとされていましたが、ここで「アジャイル」の内容がはじめて本文に組み込まれました。
さらに、2021年に発行された第7版では、「価値を提供する」ことに重きを置いた、アジャイルなプロジェクトマネジメントを行うための知識体系へと大きく変貌を遂げました。

//footnote[pm6thmodel][立上げから集結までが一直線となるようなプロジェクトをベースとするもの]
//footnote[pmbok][https://www.pmi-japan.shop/shopdetail/000000000028/]

昨今では、ソフトウェア開発やプロジェクトマネジメント以外のいろいろな分野に波及しており、相変わらずアツい「アジャイル」ですが、そもそも「アジャイル」はどういった経緯で必要となり、一般的になっていったのでしょうか。

〓本節〓では、その思想やあり方を手っ取り早く、かつ深く理解するために、まずは「アジャイル」が発生するにいたったソフトウェア開発手法の発展の歴史を追うことで、アジャイルが求められるようになった背景について学んでいきましょう！

=== アジャイルが求められるようになった背景を理解しよう

ソフトウェア開発の黎明期（1970年頃）は国内外を問わず、情報システム産業全体の課題として、ソフトウェア開発の生産性やソフトウェア品質が非常に悪いことが大きな問題となっていました。この問題に対しては、いろいろな開発手法が提案されました。具体的には、ウォーターフォール型開発モデルや、構造化プログラミングといった、現在でも用いられている手法が提案され、さまざまなプロジェクトで実践されていきました。

ここでは「ウォーターフォール型開発モデル」の興りについてあげます。
ソフトウェア開発の生産性やソフトウェア品質が悪いという課題に対し、当時（1970年頃）のITの専門家たちが参照したのがハードウェア分野のプロジェクト管理手法です。これは、開発プロセスとしてソフトウェア開発に一番近いモデルで開発を行っていると考えられたためです。建築や製造業のプロジェクト管理手法をソフトウェア開発に適用したのが、最初のソフトウェア開発手法であるウォーターフォール型開発モデルです。

なぜ、これらのプロジェクト管理手法がソフトウェア開発の管理手法として適した手法であると考えられたのでしょう。建設分野・製造分野（特にオーダーメイド品生産）の開発管理手法は、「毎回異なるものを作り、前と丸々同じものを作ることはほぼない」という点で、ソフトウェア開発手法と非常に近しかったためです。当時現役のITエンジニアだった諸先輩にこの頃の話を聞くと、「開発管理手法が確立していなかった当時のソフトウェア開発（およびそのプロジェクト管理手法）からすると、非常に革新的だった」といいます。

ウォーターフォール型開発は、開発プロジェクトを複数の作業工程に分割し、次のような運用ルールで進めるものです。

 * 前工程が完了しないと次工程に進まない
 * 次工程に進んだあと、前工程には決して戻らない
 * 開発途中での追加や変更は原則として受け入れない

//image[wf][古典的なウォーターフォールモデルの例][scale=0.7]
※モデルは『ソフトウェア工学：理論と実践』（ピアソン,2001）から引用、。以下、『ソフトウェア工学：理論と実践』と記載する。

なお、このウォーターフォール型開発モデルは1998年に出た書籍でも
「ソフトウェアのプロジェクトは、家建築のプロセスに似た方法で進行する」@<fn>{piason1}
と記載されています。少なくとも20世紀においては、ウォーターフォール型開発モデル（とそれを発展させたモデル）が主たるソフトウェア開発管理手法であるとされていました。

//footnote[piason1][『ソフトウェア工学：理論と実践』〓ページ数〓から引用]

ウォーターフォール型開発モデルが世に出たあと、これを発展させたり応用したさまざまな開発モデルが考案され、実際の開発手法として運用されました。

ここで、それら開発手法の代表的なモデルをあげてみましょう。

 * Ｖモデル：ウォーターフォール型開発モデルのテストの部分を設計の工程に対応させたもの
 * プロトタイピングモデル：ウォーターフォール型開発における、リスクと不確実性を減らすために構築すべきシステムの全部ないし一部を試作して検証し、その後システム全体を作るもの
 * スパイラルモデル：計画、目標・代替案・制約の決定、代替案とリスクの評価、開発とテストの各工程を何周も繰り返しながら、一周ごとに設計→開発→テストと段階を追って進めていくことで、ソフトウェア開発を行うもの

//image[vmodel][現代的なVモデルの例][scale=0.7]
※モデルの各プロセスの名称は『SEC BOOKS：共通フレーム2013』（独立行政法人情報処理推進機構技術本部ソフトウェア高信頼化センター,2013）から引用。

//image[spiral][スパイラルモデルの例][scale=0.7]
※モデルは『ソフトウェア工学：理論と実践』から引用。

このように、さまざまな開発モデルが考案され、また実際にたくさんの開発プロジェクトでこれらの開発手法が運用され、さまざまなソフトウェアが開発されてきました。

これらの開発手法はおおむね「開発者は顧客が要求することを最初からすべて理解している」「開発者は顧客にこの先要求されることを最初からすべて予測している」といった@<b>{前提が成立すればうまくいく}、@<b>{これからの世の中の変化にも耐えられる}という点にもとづいており、「最終の完成形のソフトウェアを作りきれば、そのあとはいじらない（いじりたくない）」という認識に立ちます。言い換えれば、@<b>{仕様書が過不足なく完璧に作られている}といった、現実的には不可能なことが必要条件となっています。しかし、未来は予測できない不確実なものです。

これらの従来型の開発手法でも、一応状況の変化などは考慮しています。ただし、その考え方は「状況のあわない部分が出ることはあって、そのときに小規模な改修はするが、基本は大きくあわなくなれば丸ごと作り直せばよい」という考えに立つものです。

しかしながら、実際は1998年に出た本でも
「伝統的な「ウォーターフォール」のアプローチで開発を行うことは、今日のシステムではもはや柔軟でもふさわしくもない」@<fn>{piason2}
と記載されています。ここまであげた各種の開発手法が、「（特に、未来の）変化に耐えられるか」という観点では大きな課題を持っているという事実は、当時のソフトウェア開発手法の共通の課題であったことがうかがえます。

//footnote[piason2][『ソフトウェア工学：理論と実践』〓ページ数〓から引用]



そして、この課題に対する1つの答えである@<b>{アジャイル的な開発プロセス}が示されるには、もう少し時間が必要だったのでした。

=== スクラムが産声をあげる

ときは前後して1993年、ソフトウェア開発手法としての「スクラム」が産声をあげます。
これは、1986年に野中郁次郎氏と竹内弘高氏が、当時の日本の製造業における革新的な開発手法を分析し、「スクラム」と名づけて発表した論文@<fn>{scrunletter}をもとに開発されました。

//footnote[scrunletter][「The New New Product Development Game」Harvard Business Review,1986（https://hbr.org/1986/01/the-new-new-product-development-game）]

さらに、1993年にJeff Sutherland氏、John Scumniotales氏、Jeff McKenna氏の3名がソフトウェア開発に適用した設計・分析ツールを構築しました。また、ときを同じくして、Ken Schwaber氏も自社でのソフトウェア開発にこの手法、@<b>{スクラム}を用いました。

その後、これらの取り組みが1995年のOOPSLAカンファレンスで共同発表されます。この内容はのちに『アジャイルソフトウェア開発スクラム』（ピアソン,2003）という書籍としてまとめられたことで、広く知られる事になります。
英語板は『Agile Software Development with SCRUM（Series in Agile Software Development）』（Prentice Hall,2001）です。
しかし、日本語版は絶版なようです@<fn>{SCRUMbook}。

//footnote[SCRUMbook][一応古本であれば入手は可能です。成立の経緯などは書籍に詳しいので、興味のある方は入手して読んでみてもよいかもしれません。]

=== XPが産声をあげる

さらに、ほぼ同時期に@<b>{XP(eXtreme Programming)}も産声をあげます。
時期がスクラムとほぼ同時期だったのは偶然ですが、筆者としてはソフトウェア開発手法の改善に対する社会的な要請が高かったからだろうと推測しています。

XPはKent Beck、Ward Cunninghamによって生み出され、その後1996年にKent BeckはRon Jeffries、Martin Fowlerとともに、プロジェクトでXPの実践を行いました。

これらの実践におけるの知見などを踏まえ、1999年Kent Beckにより『Extreme Programming Explained: Embrace Change』（邦題は『エクストリームプログラミング』）という1冊の本@<fn>{xpbook}@<fn>{bookinfo}が世に出ました。

//footnote[bookinfo][Kent Beck, Cynthia Andres, Addison-Wesley Professional, 1999]
//footnote[xpbook][以下、XP本と記載します。2004年に内容を一新して公開された邦訳の第2版は、現在も購入可能です（https://www.ohmsha.co.jp/book/9784274217623/）。また、前述したXPがはじめて実践されたプロジェクトについての話も、第17章「はじまりの物語」に記載があります。]

==== 価値・原則・プラクティス

XPはいろいろと革新的でした。
そのなかでも、XP本でアジャイル開発における重要なポイントとして示されたものが
@<b>{「価値」「原則」「プラクティス」}です。

これは、XP本では次のように記されています。

プラクティス：プラクティスは日常的な取り組みである。

→これは、具体的なアクションを示すものです。

価値：ある状況における好き嫌いの根源にあるものだ。

→これは、何をすべきかの判断基準を示すものです。

原則：その分野に特化した活動の指針である。

→これは、価値とプラクティスをつなぐための理屈や理由を示すものです。

また具体的な例として、XP本ではこれらの「価値」「原則」「プラクティス」@<fn>{basedon2Ed}がそれぞれ示されています。

//footnote[basedon2Ed][基本的にすべてXP本第2版ベースで記載します。それぞれの内容については、ぜひ原典であるXP本を読んでみてください。]

 * 「価値」
 ** コミュニケーション（Communication）
 ** シンプリシティ（Simplicity）
 ** フィードバック（Feedback）
 ** 勇気（Courage）
 ** リスペクト（Respect）

 * 「原則」
 ** 人間性（Humanity）
 ** 経済性（Economics）
 ** 相互利益（Mutual Benefit）
 ** 自己相似性（Self-Similarity）
 ** 改善（Improvement）
 ** 多様性（Diversity）
 ** ふりかえり（Reflection） @<fn>{Reflection}
 ** 流れ（Flow）
 ** 機会（Opportunity）
 ** 冗長性（Redundancy）
 ** 失敗（Failure）
 ** 品質（Quality）
 ** ベイビーステップ（Baby Steps）
 ** 責任の引き受け（Accepted Responsibility）

 * 主要プラクティス（primary practices） @<fn>{practice}
 ** 全員同席（Sit Together）
 ** チーム全体（Whole Team）
 ** 情報満載のワークスペース（informative Workspace）
 ** いきいきとした仕事（Energized Work）
 ** ペアプログラミング（Pair Programming）
 ** ストーリー（Stories）
 ** 週次サイクル（Weekly Cycle）
 ** 四半期サイクル（Quarterly Cycle）
 ** ゆとり（Slack）
 ** 10分ビルド（Ten-Minite Build）
 ** 継続的インテグレーション（Continuous Integration）
 ** テストファーストプラグラミング（Test-First Programming）
 ** インクリメンタルな設計（Incremental Design）

 * 導出プラクティス（corollary practice）
 ** 本物の顧客参加（Real Customer Involvement）
 ** インクリメンタルなデプロイ（Incremental Deployment）
 ** チームの継続（Team Continuity）
 ** チームの縮小（Shrinking Teams）
 ** 根本原因分析（Root-Cause Analysis）
 ** コードの共有（Shared Code）
 ** コードとテスト（Code and TEsts）
 ** 単一のコードベース（Single Code Base）
 ** デイリーデプロイ（Daily Deployment）
 ** 交渉によるスコープ契約（Negotiated Scope Contract）
 ** 利用都度課金（Pay-Per-Use）

//footnote[Reflection][ここでいう振り返り（Reflection）は、スクラムでいうところのふりかえり（Retrospective）とは異なります。リフレクションは「内省」的な意味合いなので、個人の成長をうながすものです。一方のレトロスペクティブは「回顧」的な意味合いなので、過去の反省で生産性の向上や対応方法の最適化をうながすものです。]
//footnote[practice][XP本では、プラクティスを主要プラクティスと導出プラクティスに分けています。「主要プラクティス（Primary practice）は、あなたが他にやっていることとは無関係に役に立つものである。すぐに改善につながり、どれからでも安全に始められる。導出プラクティス（corollary practicices）は、先に主要プラクティスを習得しておかなければ難しいだろう。プラクティスを組み合わせれば増幅効果が得られるので、できるだけ早くプラクティスを追加した方が有利である」（『エクストリームプログラミング』（オーム社,2015）から引用）]

XP本でも謳われていますが、本を読むだけではその専門家にはなれず、実際にやってみて、専門家のコミュニティに参加し、そして誰かにその専門分野を教えないといけません。
これはアジャイルソフトウェア開発においては、アジャイルソフトウェア開発を実際にやってみて、コミュニティに参加し、さらに誰かにそれを伝えることで専門家になれるということになります。

なぜなら、「価値」がズレてしまっても駄目だし、「プラクティス」だけをなぞってもうまくいかないもので、結局それをつなぐための「原則」がしっかりしている必要があります。さらに、これら3つの「価値」「原則」「プラクティス」を一体で使わないと、うまくいかない（アジャイルとして本来あるかたちになれない）からです。

また、これらをつなぐポイントとして、「アジャイルマインド」が大事だということになります。では、「アジャイルマインド」とはなにかというと、具体的な言語化はなかなか難しいのですが……。

=== Do AgileからBe Agileへ

そもそもアジャイルというのは、「機敏な」「敏しょうな」を示す英単語@<fn>{agile}で、@<b>{形容詞}です。
//footnote[agile][例えば、次のとおりです。https://eow.alc.co.jp/search?q=agile]

このため、アジャイルを導入した最初の頃などは、「意図してアジャイルを進める」「アジャイルに関するロール・アクションを行う」時期が必要な場合もありますが、本来のありようとしては、「アジャイルである」という状態を指すものです。「アジャイルをする」ではなく、「（その開発手法が・その人のあり方が）アジャイルである」という状態に到達した状態が本来の姿で、正しいということになります。

最近流行りの漫画の例でいうと、「アジャイルの呼吸・常中」のような話ですね。意識して行うのではなく、ニュートラルにその状態を維持する必要がある、といったイメージで考えてみましょう。

== アジャイルソフトウェア開発宣言（4つの価値と12の原則）

=== アジャイルソフトウェア開発宣言とは

スクラムやXPに関する本が出て、用語や手法（プラクティス）として一般的になったあと、しかしその真意が掴み切れず結局ソフトウェアの開発がうまくいかなった……、というプロジェクトが多く発生したようです。それに対するアンサーやガイドを兼ねたものでもあるのですが、2001年に「アジャイルソフトウェア開発宣言（Agile Manifest）」@<fn>{agilemanifesto}が世に出ます。

//footnote[agilemanifesto][アジャイルソフトウェア開発宣言（https://agilemanifesto.org/iso/ja/manifesto.html）]

ここでは、4つの価値と背景となる12の原則が示されました。

//quote{

アジャイルソフトウェア開発宣言

私たちは、ソフトウェア開発の実践
あるいは実践を手助けをする活動を通じて、
よりよい開発方法を見つけだそうとしている。
この活動を通して、私たちは以下の価値に至った。

プロセスやツールよりも@<b>{個人と対話}を、
包括的なドキュメントよりも@<b>{動くソフトウェア}を、
契約交渉よりも@<b>{顧客との協調}を、
計画に従うことよりも@<b>{変化への対応}を、

価値とする。すなわち、左記のことがらに価値があることを
認めながらも、私たちは右記のことがらにより価値をおく。

Kent Beck
Mike Beedle
Arie van Bennekum
Alistair Cockburn
Ward Cunningham
Martin Fowler
James Grenning
Jim Highsmith
Andrew Hunt
Ron Jeffries
Jon Kern
Brian Marick
Robert C. Martin
Steve Mellor
Ken Schwaber
Jeff Sutherland
Dave Thomas

© 2001, 上記の著者たち
この宣言は、この注意書きも含めた形で全文を含めることを条件に
自由にコピーしてよい。
//}

=== アジャイル宣言の背後にある12の原則
アジャイル開発宣言にあわせて、@<b>{12の原則}@<fn>{principles}も公表されました。これは次のようなものです。

//footnote[principles][アジャイル宣言の背後にある原則（https://agilemanifesto.org/iso/ja/principles.html）]

//quote{
12の原則

私たちは以下の原則に従う：

（1）顧客満足を最優先し、
価値のあるソフトウェアを早く継続的に提供します。

（2）要求の変更はたとえ開発の後期であっても歓迎します。
変化を味方につけることによって、お客様の競争力を引き上げます。

（3）動くソフトウェアを、2-3週間から2-3ヶ月という
できるだけ短い時間間隔でリリースします。

（4）ビジネス側の人と開発者は、プロジェクトを通して
日々一緒に働かなければなりません。

（5）意欲に満ちた人々を集めてプロジェクトを構成します。
環境と支援を与え仕事が無事終わるまで彼らを信頼します。

（6）情報を伝えるもっとも効率的で効果的な方法は
フェイス・トゥ・フェイスで話をすることです。

（7）動くソフトウェアこそが進捗の最も重要な尺度です。

（8）アジャイル･プロセスは持続可能な開発を促進します。
一定のペースを継続的に維持できるようにしなければなりません。

（9）技術的卓越性と優れた設計に対する
不断の注意が機敏さを高めます。

（10）シンプルさ（無駄なく作れる量を最大限にすること）が本質です。

（11）最良のアーキテクチャ・要求・設計は、
自己組織的なチームから生み出されます。

（12）チームがもっと効率を高めることができるかを定期的に振り返り、
それにもとづいて自分たちのやり方を最適に調整します。

//}

前述のアジャイル開発宣言の4つの価値と12の原則を対応、紐づけると、次のようになります@<fn>{dokudan}。
//footnote[dokudan][なお、この対応は筆者の独断と偏見によるものです]

 * プロセスやツールよりも@<b>{個人と対話}：（4）（5）（6）（11）（12）

 * 包括的なドキュメントよりも@<b>{動くソフトウェア}：（1）（3）（7）（10）

 * 契約交渉よりも@<b>{顧客との協調}：（1）（2）（4）（5）（6）（12）

 * 計画に従うことよりも@<b>{変化への対応}：（2）（3）（6）（8）（9）（10）

このように、あくまで1：1で対応しているのではなく、宣言と原則が相互に作用し合っていることがわかります。

こういったアジャイルの価値と原則を大事にしつつ、現在もアジャイルは世界中で推進されています。

== 国内でのアジャイルの興り

最後に、アジャイルに関する国内事情がどうだったのかも見てみましょう。

海外で産まれた歴史は「スクラム」→「XP」の順でしたが、日本で広まっていった順序は逆で、@<b>{「XP」がまず有名になり、その後「スクラム」が浸透していった}という歴史があります。

なお今回、改めて情報処理学会の電子資料や当時刊行されていた雑誌2誌（『SoftWare Design』誌（技術評論社）、『WEB+DB PRESS』誌（技術評論社））を調べてみましたが、これを裏づけるものでした。

=== 国内で、XPの情報が出だしたのは……

 * @<b>{情報処理学会}
 
XPについては、2001年頃から情報処理学会の刊行物（会誌、論文誌）で情報が出はじめ、2002年3月@<fn>{xpreport1}、4月の会誌@<fn>{xpreport2}で、XPについてのまとまった記事が掲載されたことが契機のようです。

//footnote[xpreport1][平鍋健児（2002）「XP：EXtreme Programming：ソフトウェア開発プロセスの新潮流 -前編：XP概要とその周辺-」情報処理Vol43 No3,235-241（http://id.nii.ac.jp/1001/00064473/）]
//footnote[xpreport2][平鍋健児（2002）「XP：EXtreme Programming：ソフトウェア開発プロセスの新潮流 -後編：XP実践事例の紹介-」情報処理Vol43,No4,427-434（http://id.nii.ac.jp/1001/00064181/）]

 * @<b>{『SoftWare Design』誌}

『WEB+DB PRESS』誌で最初にXPという単語の掲載が確認できたのは、2002年8月号の「実践プログラミング講座 コードデザイン最前線 vol.04」でした。

またこの翌月である2002年9月号には、特集として「特別企画「これでわかった！ XPの使い方」」が20ページに渡り掲載されており、当時の勢いが伺えます。

 * @<b>{『WEB+DB PRESS』誌}

『WEB+DB PRESS』誌で最初にXPという単語の掲載が確認できたのは『WEB+DB PRESS Vol.5』（2001）の「PHPこども電話相談室」でした@<fn>{WebDBPressXP}。

//footnote[WebDBPressXP][ただし、Unit Test（単体テスト）のためのクラス「PHPUnit」を取り上げたものであり、あまりガッツリとXPを紹介した記事ではありませんでした。]

=== 同様に国内で、スクラムの情報が出だしたのは……

 * @<b>{情報処理学会}

スクラムについては2004年にはじめて、情報処理学会の研究報告@<fn>{scrumreport}があがっています。

//footnote[scrumreport][「普通のプロジェクトへの適用を目指したアジャイルな開発手法の構築と適用結果」（藤井拓,鶴原谷雅幸,大津尚史,2004,情報処理学会研究報告Vol87,2004-SE-145,15-21（http://id.nii.ac.jp/1001/00021293/））]

 * @<b>{『SoftWare Design』誌}

『SoftWare Design』誌で最初にスクラムに関する情報が記載されたのは、2005年8月号の特集記事「緊急レポート！ 最新ソフトウェア開発手法事情」のなかで、「4章　繰り返し型開発の落とし穴―失敗から学ぶ効果的運」が最初の記載でした。とはいえ、あまりスクラムについて深堀りした内容ではありませんでした。

 * @<b>{『WEB+DB PRESS』誌}

『WEB+DB PRESS』誌で最初にスクラムに関する情報が記載されたのは、『WEB+DB PRESS Vol.4』（2008）の「特集3 オブジェクト指向開発の本質 設計、要求、開発プロセス」の「第4章 開発プロセスの本質 ウォーターフォールから反復・アジャイル開発プロセスへ」ですが、あくまで反復開発・アジャイル開発を横断的に触れたもので、スクラムについてもここで始めて言及がありました。

=== 結論として

このように、雑誌での取り上げられた時期としてはXPのほうが早いことが確認できました。日本でのアジャイルの興りは2002〜2003年頃に来た、XPブームがおそらく最初の大きな波であったことがわかりました。

====[column]XPがやって来た
実際、XPは革新的であった……というよりは、あまりに革新的すぎて、国内で話題になったときは大きな衝撃をともなうものでした。

XPが話題になった当時、筆者は大手のSIerでシステム開発に従事していました。XPが話題になったときに、「いってることはわかるけど社内でコレ適用できんの？」という話題で盛り上がったことを今でも鮮明に覚えています。

なお、SIerが当時一般的に行っていた受諾開発とXPは基本的に食い合わせが悪く、筆者は結局その会社ではアジャイル的なプロジェクトに従事することはなかったのでした。

結局XPは当時（2002～2003年ぐらい）としてはあまりに先進的すぎたため、いろいろなアプローチがバズワード化してしまったり……と、それはそれで当時はネタにもされたものではありました（特に、当時筆者が所属していたSIの界隈）。

「なぜか2人で1つのPC使ってコード書くらしい」
「テストから先に書くの？」
「めちゃくちゃ小さい粒度でプログラム書くらしい」
「ユーザーも設計開発に参加すんの？」

など。

なお、なぜこうなってしまうか……という国内的な事情としては、アメリカの企業は基本的に自社システムは社内でシステムを内製しますが、日本の企業はSIer（システムインテグレーター）にシステムを外注します。業務システムに対する開発体制の大きな差があり、こういった差をXPでは埋められなかったという話はありそうだな……と思っています。

====[/column]

== アジャイルといってもいろいろある
最後に、現在一般的となっているアジャイルプロセスや、国産のアジャイルプロセスと呼べるものについて、原情報を中心に紹介します。

=== SCRUM

前述の契機となった話のあと、Jeff SutherlandとKen Schwaberはこれらを整理・構築し、2011年に「スクラムガイド」@<fn>{scrumguide}をまとめあげます。

//footnote[scrumguide][https://res.cloudinary.com/mitchlacey/image/upload/v1589750939/Scrum_Guide_July_2011_i7cho9.pdf]

最新のスクラムガイドは以下に掲載されており@<fn>{scrumguideupdate}、誰でも読めるようになっています。
2024年現在の最新版は2020年11月のものです。

//footnote[scrumguideupdate][https://scrumguides.org/]

また、邦訳版@<fn>{scrumguidejp}も同様に掲載され、公開されています。

//footnote[scrumguidejp][https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf]

=== XP（eXtreme Programing）

XPに触れる場合、まず原情報であるXP本を参照するのがよいでしょう。

XP本は、オーム社から第2版の翻訳が『エクストリームプログラミング』として出ています。


=== 国産のアジャイルについても触れてみよう

また、国産のアジャイル的なアプローチについてもいくつか紹介しておきましょう。

1つは、IPA（情報処理推進機構）が出している「SPINA3CH（スピナッチキューブ）」です。
これは開発者自らがモデルベースアプローチにより自律的に改善を行うためのメソッドで、アジャイル的に開発現場で開発の課題を解決していくためのものです。現在はISO/IEC TR 29110-3-4（ソフトウェア開発における自律改善手法）として、国際規格にもなっています。

PDFは無償DLできる@<fn>{spina3chpdf}のでぜひ読んでみましょう。

//footnote[spina3chpdf][https://www.ipa.go.jp/archive/publish/qv6pgp00000010et-att/000027628.pdf]

もう1つは、サイボウズ株式会社が出しているkintone SIGNPOST@<fn>{kintonesingpost}です。



概要については、ページからそのまま引用します。
//quote{

「kintone SIGNPOST（キントーンサインポスト）」は「kintoneで継続的な業務改善をするための道しるべ」として、kintone経験者の考え方やコツを体系的・網羅的にまとめたコンテンツです@<fn>{kintoneabout}。



//}

//footnote[kintoneabout][https://kintone.cybozu.co.jp/kintone-signpost/about.html]
//footnote[kintonesingpost][https://kintone.cybozu.co.jp/kintone-signpost/]

簡単にいうと、ノーコードツールを現場で継続的に改善しながら業務にフィットさせて使っていくためのコツやノウハウ、考え方をパターンとしてまとめ、共有知としたものです。kintoneでの開発・運用は前述のようなかたちを目指すため、アジャイル開発になります。

== おわりに

ここまで、アジャイルにいたる歴史やその背景、興りについて学んできましたがどうだったでしょうか。

〓次の節〓からは具体的な「みんなのアジャイル」の話に移っていきます。

ぜひ、いろんな〓節〓から「みんなのアジャイル」を取り込んで、自分のアジャイルに活かしていってくださいね！

　

//embed{
    \begin{minipage}{.1\linewidth}
        \centering
        \includegraphics[width=.75\linewidth]{images/contributors/ditflame_400x400.jpg}
    \end{minipage}
    \begin{minipage}{.89\linewidth}
        ふーれむ @ditflame https://twitter.com/ditflame\\
        大阪在住。普段はkintoneをより使いやすく使ってもらう仕事をしています（アジャイル的なシステム開発をより進めてもらうもの）。
        情報処理安全確保支援士(第000594号)、kintone認定カイゼンマネジメントエキスパート
        \end{minipage}
    \hspace{1ex}
//}
